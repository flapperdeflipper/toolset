#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash

##
## Show usage info
##

function usage {
    cat <<EOF

    Download a specific terraform version

    This script downloads a given terraform version from github and creates
    symlinks to the version found in path

    Usage: ${TOOLSET_SCRIPT_NAME} <command> [<options>]

    Commands:
        list-remote   - List all installable versions
        list          - List all installed versions
        install       - Install a specific version
        use           - Switch to specific version
        uninstall     - Uninstall a specific version

EOF

   exit 0

}


##
## List remote available versions
##

function tf_env::list_remote  {
    local -r versions_url="https://api.github.com/repos/hashicorp/terraform/releases?per_page=100"
    local versions

    log::info "Fetching versions..."

    if ! versions="$(
        curl -s "${versions_url}" \
        | jq -r ".[].tag_name" \
        | grep -v "rc\\|beta\\|alpha" \
        | sed -e 's/^v//' \
        | sort --version-sort
    )"
    then
        log::error "${FUNCNAME[0]}: Failed to retrieve versions from github api"
        return 1
    fi

    printf "%s\n" "${versions}"

    return 0
}


##
## Install a new version
##

function tf_env::install {
    local version="${1}"
    local filetype
    local arch

    arch="$( uname -m )"
    if var::equals "${arch}" x86_64
    then
        arch=amd64
    fi

    if var::is_empty "${version}"
    then
        log::error "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    if fs::exists "${HOME}/.local/bin/terraform-${version}"
    then
        log::warning \
            "${FUNCNAME[0]}: The version ${version} is already installed!"
        return 1
    fi

    test -d "/tmp/terraform-${version}" \
        || mkdir -p "/tmp/terraform-${version}"

    log::info "Downloading binary..."

    curl -s -L \
        -o "/tmp/terraform-${version}/tf.zip" \
        "https://releases.hashicorp.com/terraform/${version}/terraform_${version}_darwin_${arch}.zip"

    filetype="$( file -b "/tmp/terraform-${version}/tf.zip" )"

    if ! string::contains "Zip archive data" "${filetype}"
    then
        log::error "${FUNCNAME[0]}: Download failed!"
        return 1
    fi

    if ! (
        cd "/tmp/terraform-${version}" \
        && chronic unzip tf.zip \
        && chmod +x "/tmp/terraform-${version}/terraform" \
        && mv "/tmp/terraform-${version}/terraform" "${HOME}/.local/bin/terraform-${version}" \
        && rm -r "/tmp/terraform-${version}"
    )
    then
        log::error "Failed to unpack terraform from /tmp/terraform-${version}"
        return 1
    fi

    if fs::is_link "${HOME}/.local/bin/terraform"
    then
        local actual_version
              actual_version="$( basename "$( readlink -f /usr/local/bin/terraform )" )"

        log::warning "terraform is pointing to the ${actual_version//terraform-} version"
        log::info "Do you want me to continue and overwrite it?"

        if ! interact::prompt_bool
        then
            log::warning "${FUNCNAME[0]}: Canceled!"
            log::error "${FUNCNAME[0]}: Nothing done, terraform still points to the ${actual_version//terraform-} version"
            return 1
        fi
    fi

    tf_env::use "${version}"
}


function tf_env::uninstall {
    local version="${1}"

    if [[ -z "${version}" ]]
    then
        log::error "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    if fs::exists "${HOME}/.local/bin/terraform-${version}"
    then
        rm "${HOME}/.local/bin/terraform-${version}"
        log::info "The version ${version} is uninstalled!"
    else
        log::warning "Nothing done, the version ${version} is not installed!"
    fi
}


function tf_env::list {
    local installed

    installed="$(
        find "${HOME}/.local/bin/" \
            -follow \
            -name '*terraform*' \
            -printf '%f\n' \
        | grep -Eo 'v([0-9]\.?)+$' \
        | sed '/^$/d' \
        | sort --version-sort \
        || true
    )"

    if var::is_empty "${installed}"
    then
        log::warning "${FUNCNAME[0]}: No installed versions found!"
        return 0
    else
        echo "${installed}" | log::stdin OUTPUT
    fi

    return 0
}


function tf_env::use {
    local -r version="${1}"

    if var::is_empty "${version}"
    then
        echo "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    installed="$(
        find "${HOME}/.local/bin/" -follow -name "*${version}*"
    )"

    if var::is_empty "${installed}"
    then
        log::error "${FUNCNAME[0]}: The ${version} version is not installed!"
        return 1
    fi

    actual_link="$(
        readlink -f /usr/local/bin/terraform
    )"

    if [[ "${actual_link}" =~ ${version} ]]
    then
        log::warning "terraform was already pointing to the ${version} version!"
    else
        ln -sf "${HOME}/.local/bin/terraform-${version}" /usr/local/bin/terraform
        log::info "Done! Now terraform points to the ${version} version"
    fi
}


function main {
    local -r action="${1:-""}"
    local -r action_parameter="${2:-""}"
    local -r binary_path="${HOME}/.local/bin"

    depends::check_list::silent jq curl readlink || return 1

    fs::exists "${binary_path}" || mkdir -p "${binary_path}"

    case "${action}" in
        list-remote)
            tf_env::list_remote
        ;;

        list)
            tf_env::list
        ;;

        install)
            tf_env::install "${action_parameter}"
        ;;

        uninstall)
            tf_env::uninstall "${action_parameter}"
        ;;

        use)
            tf_env::use "${action_parameter}"
        ;;

        *)
            usage
        ;;
    esac
}


main "${@}"
