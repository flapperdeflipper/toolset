#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash

##
## Show usage info
##

function usage {
    cat <<EOF

    Download a specific kubectl version

    This script downloads a given kubectl version from github and creates
    symlinks to the version found in path

    Usage: kube-env <command> [<options>]

    Commands:
        list-remote   - List all installable versions
        list          - List all installed versions
        install       - Install a specific version
        use           - Switch to specific version
        uninstall     - Uninstall a specific version

EOF

   exit 0

}


##
## List remote available versions
##

function kube_env::list_remote  {
    local -r versions_url="https://api.github.com/repos/kubernetes/kubernetes/releases?per_page=100"
    local versions

    log::info "Fetching versions..."

    if ! versions="$(
        curl -s "${versions_url}" \
        | jq -r ".[].tag_name" \
        | grep -v "rc\\|beta\\|alpha" \
        | sort --version-sort
    )"
    then
        log::error "${FUNCNAME[0]}: Failed to retrieve versions from github api"
        return 1
    fi

    printf "%s\n" "${versions}"

    return 0
}


##
## Install a new version
##

function kube_env::install {
    local version="${1}"
    local filetype

    if var::is_empty "${version}"
    then
        log::error "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    if fs::exists "${HOME}/.local/bin/kubectl-${version}"
    then
        log::warning \
            "${FUNCNAME[0]}: The version ${version} is already installed!"
        return 0
    fi

    log::info "Downloading binary..."

    curl -s -L \
        -o "/tmp/kubectl-${version}" \
        "https://storage.googleapis.com/kubernetes-release/release/${version}/bin/darwin/amd64/kubectl"

    filetype="$( file -b "/tmp/kubectl-${version}" )"

    if ! string::contains "executable" "${filetype}"
    then
        log::error "${FUNCNAME[0]}: Download failed!"
        return 1
    fi

    chmod +x "/tmp/kubectl-${version}"
    mv "/tmp/kubectl-${version}" "${HOME}/.local/bin/kubectl-${version}"

    if fs::is_link "${HOME}/.local/bin/kubectl"
    then
        local actual_version
        actual_version="$(
            basename "$( readlink -f /usr/local/bin/kubectl )"
        )"

        log::warning "kubectl is pointing to the ${actual_version//kubectl-} version"
        log::info "Do you want me to continue and overwrite it?"

        if ! interact::prompt_bool
        then
            log::warning "${FUNCNAME[0]}: Canceled!"
            log::error "${FUNCNAME[0]}: Nothing done, kubectl still points to the ${actual_version//kubectl-} version"
            return 1
        fi
    fi

    kube_env::use "${version}"
}


function kube_env::uninstall {
    local version="${1}"

    if [[ -z "${version}" ]]
    then
        log::error "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    if fs::exists "${HOME}/.local/bin/kubectl-${version}"
    then
        rm "${HOME}/.local/bin/kubectl-${version}"
        log::info "The version ${version} is uninstalled!"
    else
        log::warning "Nothing done, the version ${version} is not installed!"
    fi
}


function kube_env::list {
    local installed

    installed="$( \
        find "${HOME}/.local/bin/" \
            -name '*kubectl*' \
            -printf '%f\n' \
        | grep -Eo 'v([0-9]\.?)+$' \
        | sed '/^$/d' \
        | sort --version-sort \
        || true \
    )"

    if var::is_empty "${installed}"
    then
        log::warning "${FUNCNAME[0]}: No installed versions found!"
        return 1
    else
        echo "${installed}" | log::stdin OUTPUT
    fi

    return 0
}


function kube_env::use {
    local -r version="${1}"

    if var::is_empty "${version}"
    then
        echo "${FUNCNAME[0]}: You must specify a version!"
        return 1
    fi

    installed="$(
        find "${HOME}/.local/bin/" -name "*${version}*"
    )"

    if var::is_empty "${installed}"
    then
        log::error "${FUNCNAME[0]}: The ${version} version is not installed!"
        return 1
    fi

    actual_link="$(
        readlink -f /usr/local/bin/kubectl
    )"

    if [[ "${actual_link}" =~ ${version} ]]
    then
        log::warning "kubectl was already pointing to the ${version} version!"
    else
        ln -sf "${HOME}/.local/bin/kubectl-${version}" /usr/local/bin/kubectl
        log::info "Done! Now kubectl points to the ${version} version"
    fi
}


function main {
    local -r action="${1:-""}"
    local -r action_parameter="${2:-""}"
    local -r binary_path="${HOME}/.local/bin"

    depends::check_list::silent jq curl readlink || return 1

    fs::exists "${binary_path}" || mkdir -p "${binary_path}"

    case "${action}" in
        list-remote)
            kube_env::list_remote
        ;;

        list)
            kube_env::list
        ;;

        install)
            kube_env::install "${action_parameter}"
        ;;

        uninstall)
            kube_env::uninstall "${action_parameter}"
        ;;

        use)
            kube_env::use "${action_parameter}"
        ;;

        *)
            usage
        ;;
    esac
}


main "${@}"
