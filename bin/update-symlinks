#!/opt/homebrew/bin/bash
# vi: ft=bash
# shellcheck shell=bash disable=SC1091
set -e -u -o pipefail

## source toolset
source toolset || exit 1


## Print help output
function usage {
    cat <<EOF

    Create symlinks for frequently used GNU utils installed using homebrew.

    This script can create symlinks for all GNU utils on a mac that are
    installed using homebrew and as such are prefixed with G.
    It reads ~/.gnulinks and create a non-prefixed symlink to the util in
    /usr/local/bin for easy use of gnu utils without having to prefix them with
    "G" in all your scripts.

    ${TOOLSET_SCRIPT_NAME:-${0}} [<action>]

   Arguments:
    -a, --apply - Create symlinks

    -d, --dry   - Dry run
    -h, --help  - Show this menu

    Example:
      ${TOOLSET_SCRIPT_NAME:-${0}} --apply

EOF

    exit 0
}


function main {
    source "${HOME}/.toolset/bin/toolset"

    if var::lt "${#}" 1 \
    || interact::usage "${@}"
    then
        usage
    fi

    if ! fs::exists "${HOME}/.gnulinks"
    then
        if ! fs::exists "$HOME/.dotfiles/profile/.gnulinks"
        then
            exit::error "Not found: .gnulinks"
        else
          file=$HOME/.dotfiles/profile/.gnulinks
        fi
    else
        file=$HOME/.gnulinks
    fi

    log::info "Updating symlinks for gnu utils"

    local src dst

    grep -vE '^#|^$' $file | while read -r util
    do
        src="$( /opt/homebrew/bin/brew --prefix )/bin/g${util}"
        dst="/usr/local/bin/${util}"

        if var::matches "${1:-""}" "-a" \
        || var::matches "${1:-""}" "--apply"
        then
            log::info "Symlinking ${src} to ${dst}"

            if [[ -e "${src}" ]] && [[ ! -e "${dst}" ]]
            then
                ln -sf "${src}" "${dst}"
            else
                log::info "Util /usr/local/bin/${util} exists.. Skipped"
                continue
            fi
        else
            log::info "Dry-run: Would link ${src} to ${dst}"
        fi
    done

    log::info "All done!"
}

main "${@}"
