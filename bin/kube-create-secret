#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash


## Print help output
function usage {

    cat <<EOF

    Create a k8s secret by appending arguments to this script

    This script creates a new unencrypted secret by feeding it key/value
    arguments. It can write files or output the created secret on stdout.

    ${TOOLSET_SCRIPT_NAME} --name some-secret --namespace <namespace> [--<key>=<value> ]

    Arguments:
      -s, --name      - The name of the secret

    Optional:
      -n, --namespace - The namespace to configure for the secret (Default: default)
      -t, --type      - The type of secret to create (Default: generic)
      -o, --output    - The output to write to (Default: /dev/stdout)

    Append values to data using "--<key>=<value>":

    Example:
      ${TOOLSET_SCRIPT_NAME} -s some --password something --username someuser

EOF

    exit 0
}


function main {
    local name=""
    local namespace=default
    local output=/dev/stdout
    local arguments=()
    local secret_type=generic

    ## Bail out if no arguments
    var::lt "${#}" 1 && usage

    ## Parse arguments
    while [ "${1:-""}" != "" ]
    do
       case "${1}" in
           -h|--help)
               usage
            ;;

           -o|--output)
               output="${2:-"${output}"}"
               shift
           ;;

           -s|--name)
               name="${2:-"${name}"}"
               shift
           ;;

           -n|--namespace)
               namespace="${2:-"${namespace}"}"
               shift
           ;;

           -t|--type)
               secret_type="${2:-"${secret_type}"}"
               shift
           ;;

           *)
               arguments+=("--from-literal=${1/--/}=${2:-unknown}")
               shift
           ;;
       esac

       shift || true
    done

    var::is_empty "${name}" && usage

    log::info "Running kubectl to create secret from arguments"

    kubectl \
        create secret "${secret_type}" \
        "${name}" \
        --namespace "${namespace}" \
        "${arguments[@]}" \
        --dry-run=client \
        -o yaml > "${output}"

    if ! var::equals "${output}" "/dev/stdout"
    then
        log::info "Created in ${output}"
    fi

    log::info "K8s::secret::create Done"
}

main "${@}"
