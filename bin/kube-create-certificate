#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash


## Print help output
function usage {

    cat <<EOF

    Create a k8s secret by appending arguments to this script

    This script creates a new unencrypted tls secret by feeding it the key, cert
    and required chainfile and adds it base64 encoded to a k8s secret.
    It can write files or output the secret on stdout.

    ${TOOLSET_SCRIPT_NAME} --name some-secret --namespace <namespace> --key <file> --cert <file>

    Arguments:
      -s, --name      - The name of the secret
      -c, --cert      - The certificate file
      -k, --key       - The private key file

    Optional:
      -i, --chain     - The chain file to append to the cert
      -n, --namespace - The namespace to configure for the secret (Default: default)
      -o, --output    - The output to write to (Default: /dev/stdout)

    Example:
      ${TOOLSET_SCRIPT_NAME} -s some --key key.pem --cert cert.pem

EOF

    exit 0
}


function main {
    local name=""
    local namespace=""

    local cert=""
    local key=""
    local chain=""
    local tempfile=""

    local output=/dev/stdout

    ## Parse command line arguments
    while [ "${1:-""}" != "" ]
    do
       case "${1}" in
           -o|--output)
               output="${2}"
               shift
           ;;

           -s|--name)
               name="${2}"
               shift
           ;;

           -n|--namespace)
               namespace="${2}"
               shift
           ;;

           -c|--cert)
               cert="${2}"
               shift
           ;;

           -k|--key)
               key="${2}"
               shift
           ;;

           -i|--chain)
               chain="${2}"
               shift
           ;;

           *)
               shift
           ;;
       esac

       shift || true
    done

    ## Check for name
    var::is_empty "${name}" && usage

    ## Check for key
    if ! var::has_value "${key}" || ! fs::is_file "${key}"
    then
        log::error "${FUNCNAME[0]}: Key file is required, but key \"${key}\" not found on disk"
        return 1
    fi

    ## Check for cert
    if ! var::has_value "${cert}" || ! fs::is_file "${cert}"
    then
        log::error "${FUNCNAME[0]}: Cert file is required, but cert \"${cert}\" not found on disk"
        return 1
    fi

    ## Check for modulus
    log::input "Getting modulus from cert and key"
    ssl::modulus::show "${cert}" "${key}" | log::stdin

    if ! ssl::modulus::check "${cert}" "${key}"
    then
        log::error "${FUNCNAME[0]}: Modulus of cert and key do not match!"
        return 1
    fi

    ## Check for chain
    if var::has_value "${chain}"
    then
        if ! fs::is_file "${chain}"
        then
            log::error "${FUNCNAME[0]}: Chain file is given, but chain file \"${chain}\" not found on disk"
            return 1
        fi

        ## combining cert and chain
        tempfile="$( mktemp )"

        cat "${chain}" "${cert}" > "${tempfile}"

        cert="${tempfile}"
    fi

    local arguments=(
        "--cert=${cert}"
        "--key=${key}"
        "--dry-run=client"
        "-o yaml"
    )

    ## Add namespace to args if flag is given
    var::has_value "${namespace}" && arguments+=("--namespace=${namespace}")

    log::info "Running kubectl to create tls secret from files"

    # shellcheck disable=SC2086
    if ! kubectl create secret tls \
        "${name}" ${arguments[*]} > "${output}"
    then
        log::error "${FUNCNAME[0]}: Failed to create secret from arguments"
        return 1
    fi

    if var::has_value "${tempfile}" \
    && fs::is_file "${tempfile}"
    then
        rm "${tempfile}" \
            || log::error "${FUNCNAME[0]}: Failed to remove tempfile ${tempfile}, please do this manually"
    fi

    if ! var::equals "${output}" "/dev/stdout"
    then
        log::info "Created in ${output}"
    fi

    log::info "K8s::secret::certificate Done"
}

main "${@}"
