#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash disable=SC2048,SC2154

## Print help output
function usage() {
    cat <<EOF

    Retrieve info or connect with SSH or systems manager to an ec2 instance.

    This script is used to manage ec2 instances on AWS over SSH, SSM or by
    retrieving information about the given instance.

    Usage:
      ${TOOLSET_SCRIPT_NAME} --instance <instance> <arguments> <command>

    Required arguments:
      --instance, -i - The host to connect to with SSH (internal hostname, ip address or aws instance id)

    Options:
      -n|--not-autoscaled  - When terminating: Node is not in an Autoscaling group
      --console            - Open the ec2 terminal console for an instance
      --web                - Open this instance in the AWS web console
      --info               - Show instance information
      --reboot             - Reboot this instance
      --terminate          - Terminate this instance
      --tunnel             - Open a tunnel on a port to this instance
      --session            - Start systems manager session

      --ssh                - Setup an ssh session to a server
      --ssh-key            - Push an ssh key for an instance
      --ssh-user           - Set the SSH user for session, ssh and ssh-key

      --profile            - Set the aws profile for cli
      --region             - The aws region to work in (default: eu-west-1)
      --dry-run            - Don't do, just fake it

    Example:
      ## Open a SSH session
      ${TOOLSET_SCRIPT_NAME} --instance ip-10-30-65-200.eu-west-1.compute.internal --ssh

      ## Push an ssh key
      ${TOOLSET_SCRIPT_NAME} --instance ip-10-30-65-200.eu-west-1.compute.internal --ssh-key ~/.ssh/id_rsa --ssh-user ubuntu

      ## Setup a tunnel (use: local_port:remote_port)
      ${TOOLSET_SCRIPT_NAME} --instance 10.30.65.200 --tunnel 10080:80

      ## Run command:
      ${TOOLSET_SCRIPT_NAME} --instance 10.30.65.200 -v "ps -ef"

      ## Open console
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --console

      ## Info:
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --info

      ## Session
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --session

      ## Open web
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --web

      ## Reboot
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --reboot

      ## Terminate
      ${TOOLSET_SCRIPT_NAME} --instance i-0f8d56785c4959883 --terminate
EOF

   exit "${1:-0}"
}

function main() {
    if var::lt "${#}" 1
    then
        usage 0
    fi

    local region="${AWS_REGION:-"${AWS_DEFAULT_REGION:-"eu-west-1"}"}" ## Use eu-west-1 as default region
    local ssh_keyfile="${SSH_KEYFILE:-""}"
    local ssh_user="${SSH_USER:-""}"

    local tunnel_ports=""
    local arguments=""
    local dryrun=""
    local instance=""
    local autoscaled=1

    local -i ssh=0
    local -i ssh_key=0
    local -i tunnel=0
    local -i session=0
    local -i console=0
    local -i info=0
    local -i web=0
    local -i reboot=0
    local -i terminate=0

    ## Set shortcuts for symlinks
    case "${TOOLSET_SCRIPT_NAME}" in
        terminate) terminate=1 ;;
        ec2info)   info=1      ;;
        awssh)     ssh=1       ;;
    esac

    ## Parse command line arguments
    while [ "${1:-""}" != "" ]
    do
        case "${1}" in
            -h|--help)
                usage
            ;;

            -i|--instance)
                instance="${2}"
                shift
            ;;

            --region)
                region="${2}"
                shift
            ;;

            --tunnel)
                tunnel=1
                tunnel_ports="${2}"
                shift
            ;;

            --session)
                session=1
            ;;

            --ssh)
                ssh=1
            ;;

            --ssh-key)
                ssh_key=1
                ssh_keyfile="${2}"
                shift
            ;;

            --ssh-user)
                ssh_user="${2}"
                shift
            ;;

            --console)
                console=1
            ;;

            --info)
                info=1
            ;;

            --web)
                web=1
            ;;

            --reboot)
                reboot=1
            ;;

            --terminate)
                terminate=1
            ;;

            -n|--not-autoscaled)
                autoscaled=0
            ;;

            --dry-run)
                dryrun="echo "
            ;;

            *)
                arguments="${arguments} ${1:-""} ${2:-""}"
                shift
            ;;

        esac

        shift || true
    done

    total_arguments="$(( console + web + info + reboot + terminate + tunnel + session + ssh + ssh_key ))"

    ## Exit if no instance given
    var::is_empty "${instance}" && usage

    ## Exit if more than one action is selected
    var::lt "${total_arguments}" 1 && usage

    ## Exit if no tunnelports
    if var::eq "${tunnel}" 1 \
    && ( var::is_empty "${tunnel_ports}" || ! string.contains ":" "${tunnel_ports}" )
    then
        usage
    fi

    ## Check for dependencies
    depends::check_list "jq" "aws" || exit 1

    ## Get instance id from aws
    if ! instance_id="$( aws::ec2::instance_id "${instance}" "${arguments}" )"
    then
        exit::error "Invalid input for ${instance}: Instance input is not an id, not an internal ip and not a DNS name..."
    fi

    if [ -n "${dryrun}" ]
    then
       log::warning "Dry-run detected!"
    fi

    ## Connect systems manager if no other options or tunnel given
    if var::eq "${ssh}" 1 \
    || var::eq "${tunnel}" 1
    then
        local local_port
        local remote_port

        if var::eq "${tunnel}" 1
        then
            local_port="$(  cut -d: -f1 <<< "${tunnel_ports}" )"
            remote_port="$( cut -d: -f2 <<< "${tunnel_ports}" )"

            log::info "Creating tunnel from ${local_port} to ${instance}:${remote_port}"

            aws::ssm::tunnel "${instance}" "${local_port}" "${remote_port}" "${arguments}"

            return $?
        else
            local ssh_command="aws::ssm::ssh ${instance_id} -t -q -l ${ssh_user} ${arguments}"

            log::info "Connecting to ${instance}"

            # shellcheck disable=SC2086
            ${dryrun} ${ssh_command}

            return $?
        fi
    fi

    ## SSH key
    if var::eq "${ssh_key}" 1
    then
        log::info "pushing ssh key for ${instance}"

        ${dryrun} aws::ec2::push_public_key \
            "${instance}" \
            "${SSH_USER:-ec2-user}"
            "${ssh_keyfile}"
            "${arguments[@]}"

        return $?
    fi

    ## Session
    if var::eq "${session}" 1
    then
        log::info "Retrieving ssm session for ${instance}"

        ${dryrun} aws::ssm::session "${instance}" "${arguments}"

        return "${?}"
    fi

    ## Console
    if var::eq "${console}" 1
    then
        log::info "Retrieving terminal console for ${instance}"

        ${dryrun} aws::ec2::console_output "${instance}" "${arguments}"

        return "${?}"
    fi

    ## Reboot
    if var::eq "${reboot}" 1
    then
        log::info "Rebooting instance ${instance}"

        if ! interact::prompt_bool
        then
            log::error "${FUNCNAME[0]}: Action canceled!"
            return 1
        fi

        ${dryrun} aws::ec2::reboot "${instance}" "${arguments}"

        return "${?}"
    fi

    ## Terminate
    if var::eq "${terminate}" 1
    then
        log::info "Terminating instance ${instance}"

        if ! interact::prompt_bool
        then
            log::error "${FUNCNAME[0]}: Action canceled!"
            return 1
        fi

        ${dryrun} aws::ec2::terminate "${instance}" "${autoscaled}" "${arguments}"

        return "${?}"
    fi

    ## Show web console on request
    if var::eq "${web}" 1
    then
        ${dryrun} open "$( aws::ec2::weblink "${instance}" "${region}" )"
        return $?
    fi

    ## Show info on request
    if var::eq "${info}" 1
    then
        ${dryrun} aws::ec2::info "${instance}" "${arguments}"
        return $?
    fi
}

main "$@"
