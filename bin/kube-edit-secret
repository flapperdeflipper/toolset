#!/usr/bin/env bash
# vi: ft=bash
# shellcheck shell=bash disable=SC1091
set -e -u -o pipefail

## source toolset
source toolset || exit 1


## Set tempfile as a global var
declare tempfile=""


## Print help output
function usage {
    cat <<EOF

    Edit a secret by retrieving the secret values.

    This script retrieves a decrypted sealedsecret from the k8s cluster for editting.
    After editting, the file is re-encrypted so you can add it to your git
    repository.

    ${TOOLSET_SCRIPT_NAME:-${0}} -n <namespace> -f <filename>

    Arguments:
      -n, --namespace        - The namespace in which we can find the secret that belongs
                               to the given sealedsecret file

      -f, --filename         - The filename of the sealedsecret we are editting

    Optional:
      -s, --secret           - The secret to retrieve instead of using the filename
                               to determine the secret name

      --controller-name      - The name of the controller (Default: sealed-secrets)
      --controller-namespace - The namespace of the controller (Default: kube-system)

    Confgure the controller-name and controller-namespace using env vars:

        export KUBESEAL_CONTROLLER_NAME=sealed-secrets
        export KUBESEAL_CONTROLLER_NAMESPACE=kube-system

    Example:
      ${TOOLSET_SCRIPT_NAME:-${0}} -n default -f default/somesec.yaml -s somesec

EOF

    exit 0
}


## Remove tempfile
function remove_tempfile {
    local tmp="${1:-""}"

    fs::is_file "${tmp}" || return 0

    if ! rm "${tmp}"
    then
        log::error "${FUNCNAME[0]}: Failed to remove tempfile ${tmp}, please do this manually"
        return 1
    fi
}


function main {
    local secretname=""

    local filename=/dev/stdout
    local namespace=default

    local controller_name="${KUBESEAL_CONTROLLER_NAME:-sealed-secrets}"
    local controller_namespace="${KUBESEAL_CONTROLLER_NAMESPACE:-kube-system}"

    ## check for input
    var::lt "${#}" 1 && usage

    ## Parse command line arguments
    while [[ "${1:-""}" != "" ]]
    do
       case "${1}" in
           -h|--help)
               usage
          ;;

           -f|--filename)
               filename="${2:-"${filename}"}"
               shift
           ;;

           -n|--namespace)
               namespace="${2:-"${namespace}"}"
               shift
           ;;

           -s|--secret)
               secretname="${2:-""}"
               shift
           ;;

           --controller-name)
               controller_name="${2:-""}"
               shift
           ;;

           --controller-namespace)
               controller_namespace="${2:-""}"
               shift
           ;;
           *)
               usage
           ;;

       esac

       shift || true
    done

    ## check for dependencies
    depends::check_list "ksd" "yq" "kube-seal" || return 1

    ## Get the secret name from filename if not explicitly given
    if var::equals "${secretname}" "none" || var::is_empty "${secretname}"
     then
        secretname="$( \
            basename "${filename}" \
            | sed \
                -e 's/sealedsecret-//' \
                -e 's/\.yaml//' \
        )"
    fi

    var::is_empty "${namespace}"  && usage
    var::is_empty "${secretname}" && usage

    log::debug "Creating a tempfile for temporary storage"
    tempfile="$( mktemp )"

    ## Remove tempfile on exit
    trap 'remove_tempfile "${tempfile}"' EXIT

    ## Get secret from cluster
    log::info "Retrieving secret ${secretname} from namespace ${namespace}"

    if ! kubectl -n "${namespace}" get secret "${secretname}" -o yaml \
        | yq eval 'del(.metadata.ownerReferences)' - \
        | yq eval 'del(.metadata.managedFields)' - \
        | yq eval 'del(.metadata.creationTimestamp)' - \
        | yq eval 'del(.metadata.resourceVersion)' - \
        | yq eval 'del(.metadata.selfLink)' - \
        | yq eval 'del(.metadata.uid)' - \
        | ksd > "${tempfile}"
    then
        remove_tempfile "${tempfile}"

        log::error "${FUNCNAME[0]}: Failed to retrieve and manipulate data from secret ${secretname}"
        return 1
    fi

    ## Open the secret for editting
    log::info "Opening retrieved secret in vim editor"

    if ! vim "${tempfile}" >/dev/tty
    then
        remove_tempfile "${tempfile}"

        log::error "${FUNCNAME[0]}: Failed to edit ${tempfile} in vim"
        return 1
    fi

    ## Ask for confirmation
    log::info "I am about to (re)seal the edited secret."

    if ! interact::prompt_bool ; then
        log::warning "${FUNCNAME[0]}: Canceled!"
        remove_tempfile "${tempfile}"
        return 1
    fi

    ## Re-encrypt the file to something we can commit to git
    log::info "Offering unencrypted secret to sealed-secret controller for processing"

    if ! kube-seal \
        --namespace "${namespace}" \
        --filename "${tempfile}" \
        --output "${filename}" \
        --controller-name "${controller_name}" \
        --controller-namespace "${controller_namespace}"
    then
        log::error "${FUNCNAME[0]}: Failed to encrypt data from \"${tempfile}\" to \"${filename}\" through sealed secret controller"
        remove_tempfile "${tempfile}"
        return 1
    else
        log::info "Successfully sealed secret to ${filename}"
    fi

    ## And finally, remove the tempfile (don't bail out if fails)
    remove_tempfile "${tempfile}"

    if ! var::equals "${filename}" "/dev/stdout"
    then
        loggng::input "All done: Encrypted secret saved as \"${filename}\""
        log::info "Don't forget to commit and push your changes :)"
    fi

    log::info "K8s::secret::edit Done"
}

main "${@}"
