#!/usr/bin/env toolset
# vi: ft=bash
# shellcheck shell=bash


##
## Print help output
##

# shellcheck disable=SC2154
function usage {
    cat <<EOF

    Create or update and SSM parameter

    This script can be used to list, create or update SSM parameters.

    ${TOOLSET_SCRIPT_NAME} <lineno>

    Required arguments:
      -p, --path  - The parameter path to list or create/update

    Arguments:
       -h, --help  - Show this menu

       -l, --list  - List parameters recursive starting at a certain path
       -v, --value - When creating/updating: set this value

    Example:
      ## List parameters
      ${TOOLSET_SCRIPT_NAME} --path / --list

      ## Create/Update parameter
      ${TOOLSET_SCRIPT_NAME} --path /some/path --value plop --profile some --region eu-west-1


EOF

    exit 0
}


function main() {
    if var::lt "${#}" 1
    then
        usage 0
    fi

    local arguments=""
    local path=""
    local value=""

    local -i list=0

    ## Parse command line arguments
    while [ "${1:-""}" != "" ]
    do
        case "${1}" in
            -h|--help)
                usage
            ;;

            -l|--list)
                list=1
                shift
            ;;

            -p|--path)
                path="${2}"
                shift
            ;;

            -v|--value)
                value="${2}"
                shift
            ;;

            *)
                arguments="${arguments} ${1:-""} ${2:-""}"
                shift
            ;;

        esac

        shift || true
    done

    ## Exit if no path given
    var::is_empty "${path}" && usage

    ## Exit if list and value
    if var::eq "${list}" 1 \
    && var::has_value "${value}"
    then
        log::error "You can't use --list and --value together"
        usage
    fi

    ## Check for dependencies
    depends::check_list "jq" "aws" "chronic" || exit 1

    ## Check if admin
    aws::check_for_admin "${arguments[*]}" || return 1

    ## Show list on request
    if var::eq "${list}" 1
    then
        log::info "${FUNCNAME[0]}: Listing all parameters matching ${path}"
        aws::ssm::parameter::list "${path}" "${arguments[*]}"
        exit 0
    fi

    ## If no value is given: retrieve parameter
    if var::is_empty "${value}"
    then
        log::info "${FUNCNAME[0]}: Retrieving value for ${path}"
        aws::ssm::parameter::get "${path}" "${arguments[@]}" || return 1
    else
        log::info "${FUNCNAME[0]}: Saving value to ${path}"
        aws::ssm::parameter::put "${path}" "${value}" "${arguments[@]}" || return 1
    fi

}

main "${@}"
