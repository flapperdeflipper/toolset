#!/usr/bin/env bash
# vi: ft=bash
# shellcheck disable=SC2034,SC2154,SC2155

##
## This is a wrapper script to use in scripts
## By setting a shebang for #!/usr/bin/env toolset
## You can use the libraries in the libraries directorty without need to
## source or import them manually.
##

## Set error handling if not used in an interactive or login shell
## Then it should be done in the shell config itself
if [[ ! "${-}" =~ i ]] \
&& [[ -z "${BATS_TEST_FILENAME:-}" ]] \
&& ! shopt -q login_shell
then
    set -o errexit
    set -o errtrace
    set -o nounset
    set -o pipefail
fi

## We have 3 use cases:
## - Source in a script
## - Source in a local environment
## - Use the toolset script as an interpreter

if [[ "${0}" == "-bash" ]]
then
    ##
    ## This is a login shell, we're sourced in a local bash environment"
    ##

    ## Set the full path to the script that is being executed to an empty string
    declare TOOLSET_SCRIPT_PATH=""

    ## Set the name of the script to an empty string
    declare TOOLSET_SCRIPT_NAME=""

    ## Don't import the script as we are sourced so there is none
    declare TOOLSET_IMPORT=0

elif [[ "$( basename "${0}" )" == "toolset" ]]
then
    ##
    ## This is a script using toolset as the interpreter
    ##

    ## Set the full path to the script that is being executed: ignore toolset
    declare TOOLSET_SCRIPT_PATH="${1:-}"

    ## Set the name of the script
    declare TOOLSET_SCRIPT_NAME="$( basename "${TOOLSET_SCRIPT_PATH:-}" )"

    ## Set $0 to the script itself
    declare BASH_ARGV0="${1:-}"

    ## Shift the first argument if not empty to remove the scriptname itself which we've set to $0
    [[ "${#@}" -ne 0 ]] && shift

    ## Import the script at the end
    declare TOOLSET_IMPORT=1

else
    ##
    ## This is a script that sources toolset
    ##

    ## Set the full name of the executed script
    declare TOOLSET_SCRIPT_PATH="${0:-}"

    ## Set the name of the script
    declare TOOLSET_SCRIPT_NAME="$( basename "${TOOLSET_SCRIPT_PATH}" )"

    ## Don't import the script as we are sourced
    declare TOOLSET_IMPORT=0
fi

## Set the path to the toolset/bin directory
declare TOOLSET_BIN_PATH="$( dirname "${BASH_SOURCE[0]}" )"

## Set the library path in our environment
declare TOOLSET_LIBRARY_PATH="$( realpath "${TOOLSET_BIN_PATH}/../library" )"

## Export toolset variables
export TOOLSET_BIN_PATH \
       TOOLSET_LIBRARY_PATH \
       TOOLSET_SCRIPT_NAME \
       TOOLSET_SCRIPT_PATH

## Load the core libraries
for corefile in "${TOOLSET_LIBRARY_PATH}/core"/*.sh
do
    # shellcheck source=/dev/null
    source "${corefile}"
done

## Import all non-core shell libraries
import aws
import cache
import debug
import docker
import git
import k8s
import proc
import sanity
import ssl
import system
import tests

if ( [[ -n "${TRACE}" ]] && [[ "${TRACE}" == 1 ]] ) || [[ "${-}" =~ x ]]
then
    trap 'debug::handle_error "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR
fi

## Import source script if required
if [[ "${TOOLSET_IMPORT}" -eq 1 ]] \
&& [[ -n "${TOOLSET_SCRIPT_PATH}" ]] \
&& [[ -e "${TOOLSET_SCRIPT_PATH}" ]] \
&& [[ -z "${BATS_TEST_FILENAME:-}" ]] \
&& ! shopt -q login_shell
then
    # shellcheck source=/dev/null
    source "${TOOLSET_SCRIPT_PATH}"
fi
